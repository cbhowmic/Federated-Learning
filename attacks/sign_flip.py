# Attack that multiplies the gradient with a negative number, typically lesser than -1

import math
import torch
from . import register


def attack(grad_others, f_real, **kwargs):
    """
    Args:
        grad_others:  Non-empty list of gradients that need to be attacked
        f_real: Number of Byzantine gradients to generate
        **kwargs:

    Returns:
        Generated Byzantine gradients
    """
    if f_real == 0:
        return list()
    # print('in attack', type(grad_others), len(grad_others))
    sigma = -10
    attacked = [i * sigma for i in grad_others]
    # print(type(attacked), len(attacked))
    return attacked


def check(grad_others, f_real, **kwargs):
    if not isinstance(f_real, int) or f_real < 0:
        return f"Expected a non-negative number of Byzantine gradients to generate, got {f_real!r}"


#Â Register the attack
register("sign_flip", attack, check)
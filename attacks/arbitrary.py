# Attack that sends arbitrary values as the gradients

import math
import torch
from . import register


def attack(grad_honests, f_real, **kwargs):
    """ Generate non-finite gradients.
  Args:
    grad_honests Non-empty list of honest gradients
    f_real       Number of Byzantine gradients to generate
    ...          Ignored keyword-arguments
  Returns:
    Generated Byzantine gradients
  """
    if f_real == 0:
        return list()
    # print('in attack', type(grad_others), len(grad_others))
    sigma = 500
    attacked = list()
    for i in range(f_real):
        attacked.append((2 * sigma * torch.rand_like(grad_honests[0]) - sigma))
    # print(len(attacked), type(attacked[0]), attacked[0].shape)
    return attacked


def check(grad_honests, f_real, **kwargs):
  """ Check parameter validity for this attack.
  Args:
    grad_honests Non-empty list of honest gradients
    f_real       Number of Byzantine gradients to generate
    ...          Ignored keyword-arguments
  Returns:
    Whether the given parameters are valid for this attack
  """
  if not isinstance(grad_honests, list) or len(grad_honests) == 0:
    return f"Expected a non-empty list of honest gradients, got {grad_honests!r}"
  if not isinstance(f_real, int) or f_real < 0:
    return f"Expected a non-negative number of Byzantine gradients to generate, got {f_real!r}"


register("arbitrary", attack, check)